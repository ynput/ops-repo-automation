name: Release Trigger
on:
  workflow_dispatch:
  workflow_call:
    inputs:
      draft:
        type: boolean
      release_overwrite:
        type: string
      release_name:
        type: string

    secrets:
      token:
        required: true
      email:
        required: true
      user:
        required: true

env:
  GH_TOKEN: ${{ secrets.token || secrets.YNPUT_BOT_TOKEN }}
  GH_USER: ${{ secrets.user || secrets.CI_USER }}
  GH_EMAIL: ${{ secrets.email || secrets.CI_EMAIL }}
  DRAFT: ${{ inputs.draft }}
  NEXT_RELEASE: ${{ inputs.release_overwrite }}
  RELEASE_NAME: ${{ inputs.release_name || '' }}
  ARTIFACT_NAME: "${{ vars.PROJECT_NAME }}-package"
  PROJECT_NAME: "${{ vars.PROJECT_NAME }}"
  REQUIRED_VARS: MAIN_BRANCH,MINOR_BUMP_LABEL,PATCH_BUMP_LABEL,PROJECT_NAME
  CHANGELOG_ORDER: "${{ vars.CHANGELOG_ORDER || false }}"

jobs:
  verify-repo-secrets:
    uses: ynput/ops-repo-automation/.github/workflows/verify_secrets.yml@refactor-release-workflow-structure
    with:
      repo: ${{ github.repository }}
    secrets:
      gh_token: ${{ secrets.token }}
      gh_user: ${{ secrets.user }}
      gh_email: ${{ secrets.email }}


  verify-repo-vars:
    uses: ynput/ops-repo-automation/.github/workflows/verify_variables.yml@refactor-release-workflow-structure
    with:
      variables: "MAIN_BRANCH,MINOR_BUMP_LABEL,PATCH_BUMP_LABEL,PROJECT_NAME"
      repo: ${{ github.repository }}
    secrets:
      gh_token: ${{ secrets.token }}


  # TODO Move release query logic into github action
  get-latest-release:
    runs-on: ubuntu-latest

    outputs:
      id: ${{ steps.latest-release.outputs.id }}
      name: ${{ steps.latest-release.outputs.name }}
      tag: ${{ steps.latest-release.outputs.tag }}
      date_created: ${{ steps.latest-release.outputs.date_created }}
      date_published: ${{ steps.latest-release.outputs.date_published }}
      draft: ${{ steps.latest-release.outputs.draft }}
      pre_release: ${{ steps.latest-release.outputs.pre_release}}

    steps:
      - name: Get latest release
        id: latest-release
        run: |
          declare -A release_option_map=(
            ["id"]="id"
            ["createdAt"]="date_created"
            ["publishedAt"]="date_published"
            ["tagName"]="tag"
            ["name"]="name"
            ["isDraft"]="draft"
            ["isPrerelease"]="pre_release"
          )

          key_list=$(IFS=,; echo "${!release_option_map[*]}")
          release=$(gh release view --repo ${{ github.repository }} --json $key_list || true)

          for key in "${!release_option_map[@]}"; do
            value=$(echo "$release" | jq -r ".$key")
            echo "${release_option_map[$key]}=$value" >> $GITHUB_OUTPUT
          done

      - name: Show release data
        # TODO create a loop for this
        run: |
          echo "Release ID: ${{ steps.latest-release.outputs.id }}"
          echo "Release Name: ${{ steps.latest-release.outputs.name }}"
          echo "Tag Name: ${{ steps.latest-release.outputs.tag }}"
          echo "Date Created: ${{ steps.latest-release.outputs.date_created }}"
          echo "Date Published: ${{ steps.latest-release.outputs.date_published }}"
          echo "Draft Status: ${{ steps.latest-release.outputs.draft }}"
          echo "Pre-release Status: ${{ steps.latest-release.outputs.pre_release }}"

      - name: Test existing release
        if: ${{ ! steps.latest-release.outputs.date_published }}
        run: |
          echo "::warning::No releases found for ${{ github.repository }}. Please use the Initial Release Trigger workflow.
          exit 1

      - name: Test release drafts
        if: ${{ fromJson(steps.latest-release.outputs.draft) }}
        run: |
          echo "::warning::Release draft already present: ${{ steps.latest-release.outputs.name }}"
          exit 0


  increment-version:
    runs-on: ubuntu-latest
    needs:
      - verify-repo-secrets
      - verify-repo-vars
      - get-latest-release

    env:
      release_date: ${{ needs.get-latest-release.outputs.date_published }}
    outputs:
      next-version: "${{ steps.set-tag.outputs.NEXT_TAG }}"
      changelog: "${{ steps.pr-query.outputs.changelog-markdown }}"

    steps:
      - name: Query PR data
        id: pr-query
        uses: ynput/github-query@generate-changelog
        with:
          repo: "${{ github.repository }}"
          date: "${{ env.release_date }}"
          query_parameters: "body,labels,title,id,number,url"
          changelog_labels: "${{ env.CHANGELOG_ORDER }}"

      - name: Show debug output
        run: |
          echo "label-list: ${{ steps.pr-query.outputs.label-list }}"
          echo "bump-increment: ${{ steps.pr-query.outputs.bump-increment }}"
          echo "changelog: ${{ steps.pr-query.outputs.changelog-markdown }}"

      - name: Check for existing PRs
        if: ${{ !fromJson(steps.pr-query.outputs.raw-output) }}
        run: |
          echo "pr_list: ${{ steps.pr-query.outputs.raw-output }}"
          echo "::error::No merged PRs found since last release."
          exit 1

      - name: Check for existing PR labels
        if: ${{ !fromJson(steps.pr-query.outputs.label-list) }}
        # TODO enhance output to show wich PR
        run: |
          echo "::error:: No PR labels found. Can't create a new release."
          exit 1

      - name: ❗ Validate labels
        if: ${{ !steps.pr-query.outputs.bump-increment }}
        run: |
          # TODO Format using line breaks - not supported by annotations
          echo "::error:: No valid versioning labels found in PRs. Only found these labels: ${{ steps.pr-query.outputs.label-list }}. Are you sure you want to create a new release?"
          exit 1

      - name: 🔼 Get next Version Tag
        if: ${{ ! inputs.release_overwrite }}
        uses: reecetech/version-increment@2024.4.4
        id: calculated_version_tag
        with:
          scheme: semver
          increment: ${{ steps.pr-query.outputs.bump-increment }}
          release_branch: ${{ vars.MAIN_BRANCH }}
          use_api: true

      - name: Set next version tag
        id: set-tag
        env:
          TAG: "${{ steps.calculated_version_tag.outputs.major-version }}.${{ steps.calculated_version_tag.outputs.minor-version }}.${{ steps.calculated_version_tag.outputs.patch-version }}"
        run: |
          if [ "${{ env.TAG }}" == ".." ]; then
            echo "NEXT_TAG=${{ inputs.release_overwrite }}" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "NEXT_TAG=${{ env.TAG }}" >> $GITHUB_OUTPUT
          exit 0


  merge-to-main:
    runs-on: ubuntu-latest
    needs: increment-version

    steps:
      - name: ⬇️ Checkout ${{ vars.MAIN_BRANCH }}
        uses: actions/checkout@v4
        with:
          ref: ${{ vars.MAIN_BRANCH }}
          fetch-depth: 0

      - name: 🔑 Set Bot Authentication
        run: |
          git config --global user.name "${{ env.GH_USER }}"
          git config --global user.email "${{ env.GH_EMAIL }}"

      - name: 🔀 Merge ${{ github.ref_name }} -> ${{ vars.MAIN_BRANCH }}
        run: |
          git merge origin/${{ github.ref_name }} -m "[Automated] Merged ${{ github.ref_name }} -> ${{ vars.MAIN_BRANCH }}"

      # TODO implement this using gh command
      - name: 🔏 Push to protected ${{ vars.MAIN_BRANCH }} branch
        uses: CasperWA/push-protected@v2.16.0
        with:
          token: ${{ env.GH_TOKEN }}
          branch: ${{ vars.MAIN_BRANCH }}
          tags: false
          unprotect_reviews: false


  build-from-main:
    runs-on: ubuntu-latest
    needs:
      - get-latest-release
      - increment-version
      - merge-to-main
    env:
      OUTPUT_DIR: "artifact"
      NEXT_VERSION: "${{ needs.increment-version.outputs.next-version }}"
    outputs:
      artifact_file: ${{ steps.create-artifact.outputs.file_name }}
      latest_commit: ${{ steps.get-commit-hash.outputs.latest_commit}}

    steps:
      - name: ⬇️ Checkout ${{ vars.MAIN_BRANCH }}
        uses: actions/checkout@v4
        with:
          ref: ${{ vars.MAIN_BRANCH }}
          fetch-depth: 0
          submodules: true

      - name: Update package.py version to ${{ env.NEXT_VERSION }}
        run: |
          sed -i "s/^version = \".*\"/version = \"${{ env.NEXT_VERSION }}\"/" package.py
          sed -i "s/^name = \".*\"/name = \"${{ env.PROJECT_NAME }}\"/" package.py

      - name: Create package artifacts
        id: create-artifact
        run: |
          python create_package.py --output ${{ env.OUTPUT_DIR }}
          echo "file_name=${{ env.PROJECT_NAME }}-${{ env.NEXT_VERSION }}.zip" >> $GITHUB_OUTPUT

      - name: 🔑 Set Bot Authentication
        run: |
          git config --global user.name "${{ env.GH_USER }}"
          git config --global user.email "${{ env.GH_EMAIL }}"

      - name: Add changed files from ${{ vars.MAIN_BRANCH }}
        run: |
          git add . -- ':!${{ env.OUTPUT_DIR }}/${{ steps.create-artifact.outputs.file_name }}'
          git commit -m "[Automated] Add generated package files to ${{ vars.MAIN_BRANCH }}"

      - name: 🔏 Push to protected ${{ vars.MAIN_BRANCH }} branch
        uses: CasperWA/push-protected@v2.16.0
        with:
          token: ${{ env.GH_TOKEN }}
          branch: ${{ vars.MAIN_BRANCH }}
          tags: false
          unprotect_reviews: false

      # TODO remove obsolete step
      - name: Get latest commit hash on ${{ vars.MAIN_BRANCH }}
        id: get-commit-hash
        run: |
          latest_commit_hash=$(git rev-parse HEAD)
          echo "latest_commit=$latest_commit" >> $GITHUB_OUTPUT

      - name: 🔼 Upload package zip artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: |
            ${{ env.OUTPUT_DIR }}/${{ steps.create-artifact.outputs.file_name }}


  update-develop:
    runs-on: ubuntu-latest
    needs:
      - build-from-main
      - increment-version
    env:
      OUTPUT_DIR: "artifact"
      NEXT_VERSION: "${{ needs.increment-version.outputs.next-version }}"
      NEXT_PACKAGE_VERSION: "${{ needs.increment-version.outputs.next-version }}+dev"

    steps:
      - name: ⬇️ Checkout ${{ github.ref_name }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: 🔀 Merge ${{ vars.MAIN_BRANCH }} -> ${{ github.ref_name }}
        run: |
          git pull origin ${{ vars.MAIN_BRANCH }}
          git merge --no-ff origin/${{ vars.MAIN_BRANCH }} -m "[Automated] Merged ${{ vars.MAIN_BRANCH }} -> ${{ github.ref_name }}"

      # ? Still requried ?
      - name: Read version from package.py
        id: package-version
        run: |
          version=$(sed -n 's/^version *= *"\(.*\)"/\1/p' package.py)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Update package version for ${{ github.ref_name }} to ${{ env.NEXT_PACKAGE_VERSION }}
        run: |
          sed -i "s/^version = \".*\"/version = \"${{ env.NEXT_PACKAGE_VERSION }}\"/" package.py

      - name: Create artifacts
        id: create-artifact
        run: |
          python create_package.py --output ${{ env.OUTPUT_DIR }}

      - name: 🔑 Set Bot Authentication
        run: |
          git config --global user.email "${{ env.GH_EMAIL }}"
          git config --global user.name "${{ env.GH_USER }}"

      - name: Commit generated files
        if: ${{ steps.package-version.outputs.version != env.NEXT_PACKAGE_VERSION }}
        run: |
          git add . -- ':!${{ env.OUTPUT_DIR }}/${{ steps.create-artifact.outputs.file_name }}'
          git commit -m "[Automated] Update version in package.py for develop"

      - name: 🔏 Push to protected ${{ github.ref_name }} branch
        uses: CasperWA/push-protected@v2.16.0
        with:
          token: ${{ env.GH_TOKEN }}
          branch: ${{ github.ref_name }}
          tags: false
          unprotect_reviews: false


  create-release:
    runs-on: ubuntu-latest
    needs:
      - build-from-main
      - increment-version
    # TODO remove obsolete env var
    env:
      NEXT_VERSION: "${{ needs.increment-version.outputs.next-version }}"
      RELEASE_COMMIT: "${{ needs.build-from-main.outputs.latest_commit }}"
      CHANGELOG: "${{ needs.increment-version.outputs.changelog }}"

    steps:
      - name: 🔽 Download zip artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}

      - name: 🚀 Create Github Release
        uses: ncipollo/release-action@v1
        with:
          commit: "${{ vars.MAIN_BRANCH }}"
          tag: "${{ env.NEXT_VERSION }}"
          body: "${{ env.CHANGELOG || false }}"
          generateReleaseNotes: "${{ !env.CHANGELOG }}"
          artifacts: |
            ${{ needs.build-from-main.outputs.artifact_file }}
          token: ${{ env.GH_TOKEN }}
          draft: ${{ env.DRAFT }}


  verify-release:
    runs-on: ubuntu-latest
    needs:
      - create-release
      - increment-version
    env:
      NEXT_VERSION: "${{ needs.increment-version.outputs.next-version }}"
    steps:
      - name: Fetch Latest Release Draft
        id: fetch-latest-release-draft
        run: |
          current_release_name="$(gh release list --repo ${{ github.repository }} --json isDraft,name,createdAt --jq '[.[] | select(.isDraft == ${{ env.DRAFT }})] | sort_by(.createdAt) | reverse | .[0].name')"
          echo "current_release_name=$current_release_name" >> $GITHUB_OUTPUT

      # TODO streamline to use actions if check
      - name: 🔍 Check Release-Draft Name
        id: check-release-tag
        env:
          latest_release_draft: ${{ steps.fetch-latest-release-draft.outputs.current_release_name }}
        # TODO notification should show if it was a draft or is a release already
        run: |
          if [ "${{ env.NEXT_VERSION }}" == "${{ env.latest_release_draft }}" ]; then
            echo "::notice::Success, release-draft found with the expected name ${{ env.NEXT_VERSION }}."
            exit 0
          fi

          echo "::error::Expected tag ${{ env.NEXT_VERSION }}, but found ${{ env.latest_release_draft }}."
          exit 1
